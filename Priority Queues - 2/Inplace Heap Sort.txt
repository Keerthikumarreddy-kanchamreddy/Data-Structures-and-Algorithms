Problem statement
Given an integer array of size N. Sort this array (in decreasing order) using heap sort.

Note: Space complexity should be O(1).

Constraints :
1 <= n <= 10^6

Time Limit: 1 sec

Sample Input 1:
6 
2 6 8 5 4 3

Sample Output 1:
8 6 5 4 3 2



-----------------------------------------------------------------------------------------------



public class Solution {

	public static void inplaceHeapSort(int arr[]) {
		int n = arr.length; 

		for(int i=(n/2)-1; i>=0; i--){
			heapify(arr, i, n);
		}

		for(int i=n-1; i>=0; i--){
			int temp = arr[0];
			arr[0] = arr[i];
			arr[i] = temp;
			heapify(arr, 0, i);
		}
	}

	public static void heapify(int arr[], int startIndex, int n){

		int parentIndex = startIndex;
		int leftChild = parentIndex*2 +1;
		int rightChild = parentIndex*2 + 2;

		while(leftChild < n){
			int maxIndex = parentIndex;

			if(arr[leftChild] < arr[maxIndex]){
				maxIndex = leftChild;
			}

			if(rightChild<n && arr[rightChild] < arr[maxIndex]){
				maxIndex = rightChild;
			}

			if(maxIndex == parentIndex){
				break;
			}

			int temp = arr[parentIndex];
			arr[parentIndex] = arr[maxIndex];
			arr[maxIndex] = temp;
			parentIndex = maxIndex;
			leftChild =  parentIndex*2 +1;
			rightChild = parentIndex*2 + 2;
		}
	}

}