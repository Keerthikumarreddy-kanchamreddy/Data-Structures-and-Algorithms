Problem statement
You have been given an integer array/list(ARR) and a number 'num'. Find and return the total number of pairs in the array/list which sum to 'num'.

Note:
Given array/list can contain duplicate elements. 


Constraints :
1 <= t <= 10^2
0 <= N <= 10^4
0 <= num <= 10^9

Time Limit: 1 sec
Sample Input 1:
1
9
1 3 6 2 5 4 3 2 4
7
Sample Output 1:
7
Sample Input 2:
2
9
1 3 6 2 5 4 3 2 4
12
6
2 8 10 5 -2 5
10
Sample Output 2:
0
2


 Explanation for Input 2:
Since there doesn't exist any pair with sum equal to 12 for the first query, we print 0.

For the second query, we have 2 pairs in total that sum up to 10. They are, (2, 8) and (5, 5).


--------------------------------------------------------------------------------------------


import java.util.Arrays;

public class Solution {	

	public static int pairSum(int[] arr,int startIndex,int endIndex,int num){
    
	int numPairs=0;

    while (startIndex<endIndex){
        if (arr[startIndex]+arr[endIndex]==num){
            
            int startElement=arr[startIndex];
            int endElement=arr[endIndex];
            
        
            if (startElement==endElement){
                int numberOfElements=endIndex-startIndex+1;
                numPairs+=(numberOfElements*(numberOfElements - 1))/2;
                break;
            }
            
            
            int countStart=0;
            while (startIndex<endIndex&&arr[startIndex]==startElement){
                startIndex++;
                countStart++;
            }
            
            int countEnd=0;
            while(endIndex>=startIndex&&arr[endIndex]==endElement){
                endIndex--;
                countEnd++;
            }
            
            numPairs+=countStart*countEnd;
        } 
		else if(arr[startIndex]+arr[endIndex]<num){
            startIndex++;
        } else{
            endIndex--;
        }
    }
    
    return numPairs;
}
	

	public static int pairSum(int[] arr, int num) {

		Arrays.sort(arr);
		return pairSum(arr,0,arr.length-1, num);
	}
}