Problem statement
For a given queue containing all integer data, reverse the first K elements.

You have been required to make the desired change in the input queue itself.

Constraints :
1 <= N <= 10^6
1 <= K <= N
-2^31 <= data <= 2^31 - 1

 Time Limit: 1sec
Sample Input 1:
5 3
1 2 3 4 5
Sample Output 1:
3 2 1 4 5
Sample Input 2:
7 7
3 4 2 5 6 7 8
Sample Output 2:
8 7 6 5 2 4 3


---------------------------------------------------------------------------------------------



import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Solution {

	public static Queue<Integer> reverseKElements(Queue<Integer> input, int k) {
		//Your code goes here

		if(k<=1){
			return input;
		}

		Stack<Integer> s1 = new Stack<>();
		Stack<Integer> s2 = new Stack<>();
		int curr =1;

		//removing the elements from queue and adding to the stack s1---> 5,4,3,2,1.
		while(!input.isEmpty()){
			int temp = input.peek();
			input.remove();
			s1.push(temp);
		}

		//removing the elements from stack s1 and adding to stack s2 to reverse the order of the elements ---> 1,2,3,4,5
		while(!s1.isEmpty()){
			int temp = s1.peek();
			s1.pop();
			s2.push(temp);
		}

		//reversing the k elements using stack s1 ----> 3,2,1 , s2-4,5
		while(curr <= k){
			curr++;
			int temp = s2.peek();
			s2.pop();
			s1.push(temp);
			
		}

		//pushing the reversed k elements from stack s1 to queue -----> 3,2,1
		while(!s1.isEmpty()){
			int temp = s1.peek();
			s1.pop();
			input.add(temp);
		}

		//adding the remaining elements to the original queue ----> 3,2,1,4,5
		while(!s2.isEmpty()){
			int temp = s2.peek();
			s2.pop();
			input.add(temp);
		}

		//returning the queue
		return input;
	}

}