Problem statement
Remove all leaf nodes from a given generic Tree. Leaf nodes are those nodes, which don't have any children.

Note : Root will also be a leaf node if it doesn't have any child. You don't need to print the tree, just remove all leaf nodes and return the updated root.
Detailed explanation ( Input/output format, Notes, Images )


Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 


Sample Output 1 : (Level wise, each level in new line)
10
20



--------------------------------------------------------------------------------------------------




public class Solution {

	/*	TreeNode structure 
	 * 
	 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/

	public static TreeNode<Integer> removeLeafNodes(TreeNode<Integer> root) {
		
		if(root == null){
			return null;
		}

		if(root.children.size() == 0){
			return null;
		}

		for (int i = 0; i < root.children.size(); i++) {
  
        TreeNode child= root.children.get(i);
  
        // if it is  a leaf
        if (child.children.size() == 0) {
  
            // shifting the vector to left
            // after the point i
            for (int j = i; j < root.children.size() - 1; j++)
                root.children.set(j, root.children.get(j + 1));
  
            // delete the last element
            root.children.remove(root.children.size()-1);
			
            i--;
        }
    }
  
    // Remove all leaf node
    // of children of root
    for (int i = 0; i < root.children.size(); i++) {
        // call function for root.children
        root.children.set(i,removeLeafNodes(root.children.get(i)));
    }
 	return root;

	}
}

