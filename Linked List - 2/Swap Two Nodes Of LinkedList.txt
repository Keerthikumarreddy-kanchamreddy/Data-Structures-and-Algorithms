Problem statement
You have been given a singly linked list of integers along with two integers, 'i,' and 'j.' Swap the nodes that are present at the 'i-th' and 'j-th' positions and return the new head to the list.

Note :
1. Remember, You need to swap the nodes, not only the data.
2. Indexing starts from 0.
3. No need to print the list, it has already been taken care.

Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.
0 <= i < M
0 <= j < M

Time Limit: 1sec
Sample Input 1 :
1
3 4 5 2 6 1 9 -1
3 4
Sample Output 1 :
3 4 5 6 2 1 9 
 Sample Input 2 :
2
10 20 30 40 -1
1 2
70 80 90 25 65 85 90 -1
0 6
 Sample Output 2 :
10 30 20 40 
90 80 90 25 65 85 70


--------------------------------------------------------------------------------------------


/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static  Node<Integer> swapNodes(Node<Integer> head,int i,int j)
    {

        if(head == null){
            return null;
        }

        if(i==j){
            return head;
        }

        Node<Integer> temp=head,prev=null,c1=null,c2=null,p1=null,p2=null;

        int pos=0;

        while(temp!=null){
            if(pos==i)
            {
                p1=prev;
                c1=temp;
            }
            else if(pos==j)
            {
                p2=prev;
                c2=temp;
            }
            prev=temp;
            temp=temp.next;
            pos++;
        }

        if(p1!=null)
        {
            p1.next=c2;
        }
        else{
            head=c2;
        }


        if(p2!=null){
            p2.next=c1;
        }
        else{
            head=c1;
        }

        Node<Integer> temp1=c2.next;
        c2.next=c1.next;
        c1.next=temp1;
        return head;
    }
		
}