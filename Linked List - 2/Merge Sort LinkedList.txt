Problem statement
 Given a singly linked list of integers, sort it using 'Merge Sort.'

Note :
No need to print the list, it has already been taken care. Only return the new head to the list.

Sample Input 1 :
1
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Input 2 :
2
-1
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 


---------------------------------------------------------------------------------------------


/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static Node<Integer> mergeSort(Node<Integer> head) {
		//Your code goes here
        if(head == null || head.next == null){
            return head;
        }

        Node<Integer> slow = head;
        Node<Integer> fast =  head;

        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        Node<Integer> firstMidHead = head;
        Node<Integer> firstMidTail = slow; 
        Node<Integer> secondMidHead = slow.next;
        firstMidTail.next = null;

        Node<Integer> head1 = mergeSort(firstMidHead);
        Node<Integer> head2 = mergeSort(secondMidHead);
        Node<Integer> finalHead = mergeTwoSorteds(head1,head2);

        return finalHead;

    }

    public static Node<Integer> mergeTwoSorteds(Node<Integer> head1, Node<Integer> head2) {
        //Your code goes here

        if(head1 == null && head2 == null){
            return head1;
        }

        if(head1 == null && head2 != null){
            return head2;
        }

        if(head1 != null && head2 == null){
            return head1;
        }

        Node<Integer> curr1 = head1;
        Node<Integer> curr2 = head2;

        Node<Integer> mainHead = null;
        if(head1.data <= head2.data){
            mainHead = head1;
            curr1 = curr1.next;
        }else{
            mainHead = head2;
            curr2 = curr2.next;
        }

        Node<Integer> tail = mainHead;

        while(curr1 != null && curr2 != null){
            if(curr1.data <= curr2.data){
                tail.next = curr1;
                tail = curr1;
                curr1 = curr1.next;
            }else{
                tail.next = curr2;
                tail = curr2;
                curr2 = curr2.next;
            }
        }

        if(curr1 == null){
            tail.next = curr2;
        }else{
            tail.next = curr1;
        }

        return mainHead;
    }

}