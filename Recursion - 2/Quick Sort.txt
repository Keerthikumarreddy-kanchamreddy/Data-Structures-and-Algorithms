Problem statement
Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements between 'start' and 'end' using quick sort.



Note :
Make changes in the input array itself.

Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 2 3 5 7
Sample Output 2 :
1 2 3 5 7 
Constraints :
1 <= N <= 10^3
0 <= input[i] <= 10^9


-------------------------------------------------------------------------------------------



public class Solution {
	
	public static void quickSort(int[] input,int startIndex, int endIndex) {
		
		if(startIndex >= endIndex){
			return;
		}

		int i = dividefun(input, startIndex, endIndex);

		quickSort(input, startIndex, i-1);
		quickSort(input, i+1, endIndex);
	}

	public static int dividefun(int[] arr, int si, int ei){

		int pivot = arr[si];
		int count = 0;

		for(int i=si+1; i<=ei; i++){
			if(arr[i] < pivot){
				count++;
			}
		}

		int temp = arr[si + count];
		arr[si + count] = pivot;
		arr[si] = temp; 


		int i=si; 
		int j= ei;

		while(i < j){
			if(arr[i] < pivot){
				i++;
			}else if (arr[j] >= pivot){
				j--;
			}else{
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i++;
				j--; 
			}
		}

		return si+count;

	}
	
}