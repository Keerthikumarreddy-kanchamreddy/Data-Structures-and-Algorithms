Problem statement
You are given the starting 'l' and the ending 'r' positions of the array 'ARR'.


You must sort the elements between 'l' and 'r'.


Note:
Change in the input array itself. So no need to return or print anything.
Example:
Input: ‘N’ = 7,
'ARR' = [2, 13, 4, 1, 3, 6, 28]

Output: [1 2 3 4 6 13 28]

Explanation: After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].

Sample Input 1:
7
2 13 4 1 3 6 28
Sample Output 1:
1 2 3 4 6 13 28
Explanation of Sample Output 1:
After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].
Sample Input 2:
5
9 3 6 2 0
Sample Output 2:
0 2 3 6 9
Explanation of Sample Output 2:
After applying 'merge sort' on the input array, the output is [0 2 3 6 9].
Constraints :
1 <= N <= 10^3
0 <= ARR[i] <= 10^9


------------------------------------------------------------------------------------------


public class Solution {

    public static void mergeSort(int[] arr, int l, int r){
        // Write your code here 

        if(arr.length <=1){
            return;
        }

        int[] s1 = new int[arr.length/2];
        int[] s2 = new int[arr.length - s1.length]; 

        for(int i=0; i<arr.length/2; i++){
            s1[i] = arr[i];
        }

        for(int i=arr.length/2; i< arr.length; i++){
            s2[i-arr.length/2] = arr[i]; 
        }

        mergeSort(s1, l,r );
        mergeSort(s2, l, r);
        int i = 0, j = 0;
 
        int k = 0;
        while (i < s1.length && j < s2.length) {
            if (s1[i] <= s2[j]) {
                arr[k] = s1[i];
                i++;
            }
            else {
                arr[k] = s2[j];
                j++;
            }
            k++;
        }
 
        // Copy remaining elements of L[] if any
        while (i < s1.length) {
            arr[k] = s1[i];
            i++;
            k++;
        }
 
        // Copy remaining elements of R[] if any
        while (j < s2.length) {
            arr[k] = s2[j];
            j++;
            k++;
        }
    
    }
}
