Problem statement
Given a binary tree with N number of nodes, check if that input tree is BST (Binary Search Tree). If yes, return true, return false otherwise.

Note:
Duplicate elements should be kept in the right subtree.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= Number of edges <= 10^5
Time Limit: 1 second
Sample Input 1 :
3 1 5 -1 2 -1 -1 -1 -1


Sample Output 1 :
true
Sample Input 2 :
5 2 10 0 1 -1 15 -1 -1 -1 -1 -1 -1


Sample Output 2 :
false




-------------------------------------------------------------------------------------------



/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

 */

 import java.util.*;

public class Solution {

	public static boolean isBST(BinaryTreeNode<Integer> root) {

		if(root == null){
			return true;
		}

		int leftMax = largest(root.left);
		int rightMin = smallest(root.right);

		if(root.data < leftMax){
			return false;
		}

		if(root.data > rightMin){
			return false;
		}

		return isBST(root.left) && isBST(root.right);
	}

	public static int largest(BinaryTreeNode<Integer> root) {

		if(root == null){
			return Integer.MIN_VALUE;
		}

		int rootData = root.data;

		int leftLargest = largest(root.left);
		int rightLargest = largest(root.right);

		return Math.max(rootData, Math.max(leftLargest, rightLargest)); 
	}

	public static int smallest(BinaryTreeNode<Integer> root) {

		if(root == null){
			return Integer.MAX_VALUE;
		}

		int rootData = root.data;

		int leftSmallest = smallest(root.left);
		int rightSmallest = smallest(root.right);

		return Math.min(rootData, Math.min(leftSmallest, rightSmallest)); 
	}


}