Problem statement
Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return -1 if it is not present in the array.

Last index means - if x is present multiple times in the array, return the index at which x comes last in the array.

You should start traversing your array from 0, not from (N - 1).

Do this recursively. Indexing in the array starts from 0.

Constraints :
1 <= N <= 10^3

Sample Input :
4
9 8 10 8
8
Sample Output :
3


-------------------------------------------------------------------------------------------



public class Solution {

	public static int lastIndex(int input[], int x) {

		int startIndex =0; 
		return lastIndex(input,x,startIndex);
	}

	private static int lastIndex(int[] arr, int target, int si){

		if(si == arr.length-1){
			return -1;
		}

		int res = lastIndex(arr, target, si+1);
		
		if(res != -1){
			return res;
		}else{
			if(arr[si] == target){
				return si;
			}else{
				return -1;
			}
		}
	}
	
}



----------------------------------------------------------------------------------------------



// public class Solution {

// 	public static int lastIndex(int input[], int x) {

// 		int li =input.length-1; 
// 		return lastIndex(input,x,li);
// 	}

// 	private static int lastIndex(int[] arr, int target, int li){

// 		if(li < 0){
// 			return -1;
// 		}

// 		if(arr[li] == target){
// 			return li;
// 		}

// 		return lastIndex(arr, target, li-1);
// 	}
	
// }