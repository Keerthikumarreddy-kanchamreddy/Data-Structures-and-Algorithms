Problem statement
For a given a Binary Tree of type integer, find and return the minimum and the maximum data values.

Return the output as an object of Pair class, which is already created.

Note:
All the node data will be unique and hence there will always exist a minimum and maximum node data.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
2 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
Sample Output 1:
1 14
Sample Input 2:
10 20 60 -1 -1 3 50 -1 -1 -1 -1 
Sample Output 2:
3 60




---------------------------------------------------------------------------------------------





/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/



/*

	Representation of the Pair Class

	class Pair<T, U> {
		T minimum;
		U maximum;

		public Pair(T minimum, U maximum) {
			this.minimum = minimum;
			this.maximum = maximum;
		}

	}

*/

public class Solution {

	public static Pair<Integer, Integer> getMinAndMax(BinaryTreeNode<Integer> root) {
		//Your code goes here


		Pair<Integer,Integer> minAndMax = new Pair<>(Integer.MIN_VALUE, Integer.MAX_VALUE);
		if(root.left == null && root.right == null){
			minAndMax.minimum = root.data;
			minAndMax.maximum = root.data;
			return minAndMax;
		}

		Pair<Integer, Integer> ans = new Pair<>(Integer.MIN_VALUE, Integer.MAX_VALUE);
		ans.minimum = root.data;
		ans.maximum = root.data;

		if (root.left != null)
   		 {
        	Pair<Integer, Integer> leftAns = getMinAndMax(root.left);
        ans.minimum =Math.min(ans.minimum, leftAns.minimum);
        ans.maximum = Math.max(ans.maximum, leftAns.maximum);
    }

    if (root.right != null)
    {
        Pair<Integer, Integer> rightAns = getMinAndMax(root.right);
        ans.minimum = Math.min(ans.minimum, rightAns.minimum);
        ans.maximum = Math.max(ans.maximum, rightAns.maximum);
    }

		return ans;
	}
	
}