Problem statement
For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.

A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.

Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.
Note:
You will not get a partial score for this problem. You will get marks only if all the test cases are passed.
Return "false" if no brackets are present in the input.


Constraints:
0 <= N <= 10^6
Where N is the length of the expression.

Time Limit: 1 second
Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false


---------------------------------------------------------------------------------------------



import java.util.*;
public class Solution {

	public static boolean checkRedundantBrackets(String expression) {
		//Your code goes here

		Stack<Character> st = new Stack<>();
        char[] str = expression.toCharArray();
        // Iterate through the given expression 
        for (char ch : str) {
 
            // if current character is close parenthesis ')' 
            if (ch == ')') {
                char top = st.peek();
                st.pop();
 
                // If immediate pop have open parenthesis '(' 
                // duplicate brackets found 
                boolean flag = true;
 
                while (top != '(') {
 
                    // Check for operators in expression 
                    if (top == '+' || top == '-'
                            || top == '*' || top == '/') {
                        flag = false;
                    }
 
                    // Fetch top element of stack 
                    top = st.peek();
                    st.pop();
                }
 
                // If operators not found 
                if (flag == true) {
                    return true;
                }
            } else {
                st.push(ch); // push open parenthesis '(', 
            }                // operators and operands to stack 
        }
        return false;
    }
}