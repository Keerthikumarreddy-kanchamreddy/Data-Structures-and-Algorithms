Problem statement
Implement the function RemoveMin for the min priority queue class.

For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.

Note : main function is given for your reference which we are using internally to test the code




-----------------------------------------------------------------------------------------------------------



import java.util.ArrayList;

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (parentIndex >= 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

	int removeMin() throws PriorityQueueException {
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
		
		if(isEmpty()){
			throw new PriorityQueueException();
		}

		int temp = heap.get(0);
		heap.set(0, heap.get(heap.size()-1));
		heap.remove(heap.size()-1);
		int parentIndex = 0;
		int leftChild = 1;
		int rightChild = 2;
		int minIndex = parentIndex;

		while(leftChild < heap.size()){

			if(heap.get(leftChild) < heap.get(minIndex)){
				minIndex = leftChild;
			}

			if(rightChild < heap.size() && heap.get(rightChild) < heap.get(minIndex)){
				minIndex = rightChild;
			}

		
			if(minIndex == parentIndex){
				break;
			}else{
				int temp1 = heap.get(minIndex);
				heap.set(minIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp1);
				parentIndex = minIndex;
				leftChild = (2*parentIndex) +1;
				rightChild =  (2*parentIndex) +2;
			}


		}


		return temp;
	}
}

class PriorityQueueException extends Exception {

}