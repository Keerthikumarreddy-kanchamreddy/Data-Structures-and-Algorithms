Problem statement
Implement the BST class which includes following functions -

1. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.

2. search
Given an element, find if that is present in BST or not. Return true or false.

3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.

4. printTree (recursive) -
Print the BST in in the following format -

For printing a node with data N, you need to follow the exact format -

N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.

There is no space in between.

You need to print all nodes in the recursive format in different lines.

Sample Input 1:
6
1 2
1 3
1 1
4
2 2
4
Sample Output 1:
2:L:1,R:3
1:
3:
3:L:1,
1:
Explanation for sample Input 1:
Explanation: The first line 6 indicates that there are 6 operations to be performed on the BST.

The subsequent lines are the operations, which can be understood as follows:
1 2: Insert 2 into the BST.

1 3: Insert 3 into the BST.

1 1: Insert 1 into the BST.

4: Print the BST in the specified format.

2 2: Search for 2 in the BST.

4: Print the BST in the specified format.



---------------------------------------------------------------------------------------------




/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

public class BinarySearchTree {

	private BinaryTreeNode<Integer> root;
	private int size; 
	public void insert(int data) {
		//Implement the insert() function
		root = insertHelper(root, data);
	}

	private static BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> node, int data){
		if(node == null){
			BinaryTreeNode<Integer> newRoot = new BinaryTreeNode<>(data);
			return newRoot;
		}

		if(data <= node.data){
			node.left = insertHelper(node.left, data);
		}

		if(data > node.data){
			node.right = insertHelper(node.right, data);
		}

		return node;
	}
	
	public void remove(int data) {
		//Implement the remove() function
		root = removeHelper(root, data);
	}

	private static BinaryTreeNode<Integer> removeHelper(BinaryTreeNode<Integer> node, int data){
		if(node == null){
			return null;
		}

		if(node.data < data){
			node.right = removeHelper(node.right, data);
		}

		if(node.data > data){
			node.left = removeHelper(node.left, data);
		}

		if(node.left == null && node.right == null){
			return null;
		}

		if(node.left != null && node.right == null){
			return node.left;
		}

		if(node.left == null && node.right != null){
			return node.right;
		}

		if(node.left != null && node.right != null){

			BinaryTreeNode<Integer> minNode = node.right;
             while(minNode.left!=null){
                 minNode = minNode.left;
             }
            node.data = minNode.data;
            node.right = removeHelper(node.right, minNode.data);   
			return node;
		}

		return node;
	}


	public void printTree() {
		//Implement the printTree() function
		printTreeHelper(root);
	}
	
	private static void printTreeHelper(BinaryTreeNode<Integer> node){

		if(node == null){
			return;
		}

		System.out.print(node.data + ":");
		if(node.left != null){
			System.out.print("L:" + node.left.data+",");
		}

		if(node.right != null){
			System.out.print("R:" + node.right.data);
		}

		System.out.println();

		printTreeHelper(node.left);
		printTreeHelper(node.right);
	}
	public boolean search(int data) {
		//Implement the search() function
		return searchHelper(root, data);
	}

	private static boolean searchHelper(BinaryTreeNode<Integer> node, int x){
		if(node == null){
			return false;
		}

		if(node.data == x){
			return true;
		}

		if(x > node.data){
			return searchHelper(node.right, x);
		}else{
			return searchHelper(node.left, x);
		}
	}

}