Problem statement
Given a BST and an integer k. Find and return the path from the node with data k and root (if a node with data k is present in given BST) in a list. Return empty list otherwise.

Note: Assume that BST contains all unique elements.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
Time Limit: 1 second   
Sample Input 1:
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
2


Sample Output 1:
2 5 8




---------------------------------------------------------------------------------------------




import java.util.ArrayList;

public class Solution {

	/*
	 * Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 * 		public BinaryTreeNode(T data) 
	 * 		{ 
	 * 			this.data = data; 
	 * 		}
	 * }
	 */

	public static ArrayList<Integer> getPath(BinaryTreeNode<Integer> root, int data){
	
		if(root == null){
		//	ArrayList<Integer> ans = new ArrayList<>();
			return null;
		}

		if(root.data == data){
			ArrayList<Integer> ans = new ArrayList<>();
			ans.add(root.data);
			return ans;
		}

		if(data < root.data && root.left != null){
			ArrayList<Integer> left = getPath(root.left, data);
			if(left!= null){
				left.add(root.data);
				return left;
			}
			
		}
		
		if(data > root.data && root.right != null){
			ArrayList<Integer> right = getPath(root.right, data);
			if(right!= null){
				right.add(root.data);
				return right;
			}
		}

		return null;
	}
}